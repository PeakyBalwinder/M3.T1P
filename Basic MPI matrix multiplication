#include <iostream>
#include <mpi.h>

#define MATRIX_SIZE 6 

using namespace std;

// Function to print a matrix
void printMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to perform matrix multiplication
void matrixMultiply(int** A, int** B, int** C, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = 0;
            for (int k = 0; k < size; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main(int argc, char** argv) {
    int rank, size;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Define matrices A, B, and C
    int** A = new int*[MATRIX_SIZE];
    int** B = new int*[MATRIX_SIZE];
    int** C = new int*[MATRIX_SIZE];
    for (int i = 0; i < MATRIX_SIZE; i++) {
        A[i] = new int[MATRIX_SIZE];
        B[i] = new int[MATRIX_SIZE];
        C[i] = new int[MATRIX_SIZE];
    }

    // Initialize matrices A and B (for simplicity, we initialize them with random values)
    srand(rank); // Seed the random number generator with the rank
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }
    }

    // Perform matrix multiplication
    matrixMultiply(A, B, C, MATRIX_SIZE);

    // Gather results from all processes to process 0
    if (rank == 0) {
        int** result = new int*[MATRIX_SIZE];
        for (int i = 0; i < MATRIX_SIZE; i++) {
            result[i] = new int[MATRIX_SIZE];
        }

        MPI_Gather(C[0], MATRIX_SIZE * MATRIX_SIZE / size, MPI_INT, result[0], MATRIX_SIZE * MATRIX_SIZE / size, MPI_INT, 0, MPI_COMM_WORLD);

        // Print the result matrix
        cout << "Result Matrix:" << endl;
        printMatrix(result, MATRIX_SIZE);

        // Clean up
        for (int i = 0; i < MATRIX_SIZE; i++) {
            delete[] result[i];
        }
        delete[] result;
    } else {
        MPI_Gather(C[0], MATRIX_SIZE * MATRIX_SIZE / size, MPI_INT, NULL, 0, MPI_INT, 0, MPI_COMM_WORLD);
    }

    // Clean up
    for (int i = 0; i < MATRIX_SIZE; i++) {
        delete[] A[i];
        delete[] B[i];
        delete[] C[i];
    }
    delete[] A;
    delete[] B;
    delete[] C;

    MPI_Finalize();

    return 0;
}
