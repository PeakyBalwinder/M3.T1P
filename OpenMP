#include <iostream>
#include <mpi.h>
#include <omp.h>

#define MATRIX_SIZE 1000

using namespace std;

// Function to perform matrix multiplication
void matrixMultiply(int** A, int** B, int** C, int size) {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = 0;
            for (int k = 0; k < size; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main(int argc, char** argv) {
    int rank, size, num_threads;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Initialize matrices A, B, and C on root process
    int** A = nullptr;
    int** B = nullptr;
    int** C = nullptr;
    if (rank == 0) {
        A = new int*[MATRIX_SIZE];
        B = new int*[MATRIX_SIZE];
        C = new int*[MATRIX_SIZE];
        for (int i = 0; i < MATRIX_SIZE; i++) {
            A[i] = new int[MATRIX_SIZE];
            B[i] = new int[MATRIX_SIZE];
            C[i] = new int[MATRIX_SIZE];
            for (int j = 0; j < MATRIX_SIZE; j++) {
                A[i][j] = rand() % 10;
                B[i][j] = rand() % 10;
            }
        }
    }

    // Broadcast matrix sizes to all processes
    MPI_Bcast(&MATRIX_SIZE, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Scatter matrix A to all processes
    int** localA = new int*[MATRIX_SIZE / size];
    MPI_Scatter(A, MATRIX_SIZE * MATRIX_SIZE / size, MPI_INT, localA[0], MATRIX_SIZE * MATRIX_SIZE / size, MPI_INT, 0, MPI_COMM_WORLD);

    // Broadcast matrix B to all processes
    MPI_Bcast(B, MATRIX_SIZE * MATRIX_SIZE, MPI_INT, 0, MPI_COMM_WORLD);

    // Allocate space for local result matrix C
    int** localC = new int*[MATRIX_SIZE / size];
    for (int i = 0; i < MATRIX_SIZE / size; i++) {
        localC[i] = new int[MATRIX_SIZE];
    }

    // Perform matrix multiplication locally using OpenMP
    #pragma omp parallel shared(localA, B, localC) private(num_threads)
    {
        num_threads = omp_get_num_threads();
        matrixMultiply(localA, B, localC, MATRIX_SIZE / size);
    }

    // Gather local result matrices into global result matrix C on root process
    MPI_Gather(localC[0], MATRIX_SIZE * MATRIX_SIZE / size, MPI_INT, C[0], MATRIX_SIZE * MATRIX_SIZE / size, MPI_INT, 0, MPI_COMM_WORLD);

    // Clean up
    if (rank == 0) {
        for (int i = 0; i < MATRIX_SIZE; i++) {
            delete[] A[i];
            delete[] B[i];
            delete[] C[i];
        }
        delete[] A;
        delete[] B;
        delete[] C;
    }
    for (int i = 0; i < MATRIX_SIZE / size; i++) {
        delete[] localA[i];
        delete[] localC[i];
    }
    delete[] localA;
    delete[] localC;

    MPI_Finalize();

    return 0;
}
