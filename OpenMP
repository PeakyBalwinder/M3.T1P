#include <iostream>
#include <iomanip>
#include <mpi.h>
#include <ctime>
#include <vector>
#include <omp.h>

#define MATRIX_SIZE 6

using namespace std;

// Function to perform matrix multiplication for a portion of matrices A and B
void matrixMultiply(int **A, int **B, int **C, int startRow, int numRows, int size)
{
#pragma omp parallel for
    for (int i = startRow; i < startRow + numRows; i++)
    {
        for (int j = 0; j < size; j++)
        {
            C[i][j] = 0;
            for (int k = 0; k < size; k++)
            {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main(int argc, char **argv)
{
    int rank, size;
    double start_time, end_time, execution_time;
    int num_threads;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Ask the user to input the number of threads
    if (rank == 0)
    {
        cout << "Enter the number of threads: ";
        cin >> num_threads;
    }

    // Broadcast the number of threads to all processes
    MPI_Bcast(&num_threads, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Set the number of threads for OpenMP
    omp_set_num_threads(num_threads);

    // Define matrices A, B, and C
    int **A = new int *[MATRIX_SIZE];
    int **B = new int *[MATRIX_SIZE];
    int **C = new int *[MATRIX_SIZE];
    for (int i = 0; i < MATRIX_SIZE; i++)
    {
        A[i] = new int[MATRIX_SIZE];
        B[i] = new int[MATRIX_SIZE];
        C[i] = new int[MATRIX_SIZE];
    }

    // Initialize matrices A and B consistently across all processes
    srand(0); // Seed the random number generator for consistency
    for (int i = 0; i < MATRIX_SIZE; i++)
    {
        for (int j = 0; j < MATRIX_SIZE; j++)
        {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }
    }

    // Calculate the number of rows each process will handle
    int rows_per_process = MATRIX_SIZE / size;
    int startRow = rank * rows_per_process;

    // Start timing
    start_time = MPI_Wtime();

    // Perform matrix multiplication
    matrixMultiply(A, B, C, startRow, rows_per_process, MATRIX_SIZE);

    // End timing
    end_time = MPI_Wtime();
    execution_time = (end_time - start_time) * 1e9; // Convert seconds to nanoseconds

    // Gather execution times from all processes onto process 0
    vector<double> execution_times(size);
    MPI_Gather(&execution_time, 1, MPI_DOUBLE, execution_times.data(), 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Print the average execution time on process 0
    if (rank == 0)
    {
        double total_execution_time = 0.0;
        for (double time : execution_times)
        {
            total_execution_time += time;
        }
        double average_execution_time = total_execution_time / size;
        cout << fixed << setprecision(0) << "Average Execution Time: " << average_execution_time << " nanoseconds" << endl;
    }

    // Clean up
    for (int i = 0; i < MATRIX_SIZE; i++)
    {
        delete[] A[i];
        delete[] B[i];
        delete[] C[i];
    }
    delete[] A;
    delete[] B;
    delete[] C;

    MPI_Finalize();

    return 0;
}
